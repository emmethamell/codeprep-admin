[
    {
        "id": 1,
        "difficulty": "Easy",
        "topics": ["Array", "Hash Table"],
        "name": "Two Sum", 
        "content": "Given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to `target`.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou may return the answer in any order."
    },
    {
        "id": 2,
        "difficulty": "Medium",
        "topics": ["Linked List", "Math", "Recursion"],
        "name": "Add Two Numbers",
        "content": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself."
    },
    {
        "id": 3,
        "difficulty": "Medium",
        "topics": ["Hash Table", "String", "Sliding Window"],
        "name": "Longest Substring Without Repeating Characters",
        "content": "Given a string `s`, find the length of the longest substring without repeating characters."
    },
    {
        "id": 4,
        "difficulty": "Hard",
        "topics": ["Array", "Binary Search", "Divide and Conquer"],
        "name": "Median of Two Sorted Arrays",
        "content": "Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return the median of the two sorted arrays.\n\nThe overall run time complexity should be `O(log (m+n))`."
    },
    {
        "id": 5,
        "difficulty": "Medium",
        "topics": ["String", "Dynamic Programming"],
        "name": "Longest Palindromic Substring",
        "content": "Given a string `s`, return the longest palindromic substring in `s`."
    },
    {
        "id": 6,
        "difficulty": "Medium",
        "topics": ["String"],
        "name": "Zigzag Conversion",
        "content": "The string `\"PAYPALISHIRING\"` is written in a zigzag pattern on a given number of rows like this:\n\n```\nP   A   H   N\nA P L S I I G\nY   I   R\n```\n\nAnd then read line by line: `\"PAHNAPLSIIGYIR\"`\n\nWrite the code that will take a string and make this conversion given a number of rows."
    },
    {
        "id": 7,
        "difficulty": "Medium",
        "topics": ["Math"],
        "name": "Reverse Integer",
        "content": "Given a signed 32-bit integer `x`, return `x` with its digits reversed. If reversing `x` causes the value to go outside the signed 32-bit integer range `[-2^31, 2^31 - 1]`, then return `0`.\n\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned)."
    },
    {
        "id": 8,
        "difficulty": "Medium",
        "topics": ["Math", "String"],
        "name": "String to Integer (atoi)",
        "content": "Implement the `myAtoi(string s)` function, which converts a string to a 32-bit signed integer (similar to C/C++'s `atoi` function).\n\nThe algorithm for `myAtoi(string s)` is as follows:\n\n1. Read in and ignore any leading whitespace.\n2. Check if the next character is `'-'` or `'+'`. Read this character in if it is either.\n3. Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\n4. Convert these digits into an integer (i.e. `\"123\" -> 123`, `\"0032\" -> 32`). If no digits were read, then the integer is `0`.\n5. If the integer is out of the 32-bit signed integer range `[-2^31, 2^31 - 1]`, then clamp the integer so that it remains in the range."
    },
    {
        "id": 9,
        "difficulty": "Easy",
        "topics": ["Math"],
        "name": "Palindrome Number",
        "content": "Given an integer `x`, return `true` if `x` is palindrome integer.\n\nAn integer is a palindrome when it reads the same backward as forward.\n\nFor example, `121` is palindrome while `123` is not."
    },
    {
        "id": 10,
        "difficulty": "Hard",
        "topics": ["String", "Dynamic Programming", "Backtracking"],
        "name": "Regular Expression Matching",
        "content": "Given an input string `s` and a pattern `p`, implement regular expression matching with support for `'.'` and `'*'` where:\n\n- `'.'` Matches any single character.\n- `'*'` Matches zero or more of the preceding element.\n\nThe matching should cover the entire input string (not partial)."
    },
    {
        "id": 11,
        "difficulty": "Medium",
        "topics": ["Array", "Two Pointers"],
        "name": "Container With Most Water",
        "content": "Given `n` non-negative integers `a1, a2, ..., an`, where each represents a point at coordinate `(i, ai)`. `n` vertical lines are drawn such that the two endpoints of the line `i` is at `(i, ai)` and `(i, 0)`. Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.\n\nNotice that you may not slant the container."
    },
    {
        "id": 12,
        "difficulty": "Medium",
        "topics": ["Math", "String"],
        "name": "Integer to Roman",
        "content": "Given an integer, convert it to a roman numeral.\n\nRoman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`."
    },
    {
        "id": 13,
        "difficulty": "Easy",
        "topics": ["String", "Hash Table"],
        "name": "Roman to Integer",
        "content": "Given a roman numeral, convert it to an integer.\n\nRoman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`."
    },
    {
        "id": 14,
        "difficulty": "Easy",
        "topics": ["String"],
        "name": "Longest Common Prefix",
        "content": "Write a function to find the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string `\"\"`."
    },
    {
        "id": 15,
        "difficulty": "Medium",
        "topics": ["Array", "Two Pointers", "Sorting"],
        "name": "3Sum",
        "content": "Given an integer array nums, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`.\n\nNotice that the solution set must not contain duplicate triplets."
    },
    {
        "id": 16,
        "difficulty": "Medium",
        "topics": ["Array", "Two Pointers", "Sorting"],
        "name": "3Sum Closest",
        "content": "Given an integer array `nums` of length `n` and an integer `target`, find three integers in `nums` such that the sum is closest to `target`.\n\nReturn the sum of the three integers.\n\nYou may assume that each input would have exactly one solution."
    },
    {
        "id": 17,
        "difficulty": "Medium",
        "topics": ["Hash Table", "String", "Backtracking"],
        "name": "Letter Combinations of a Phone Number",
        "content": "Given a string containing digits from `2-9` inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\n\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters."
    },
    {
        "id": 18,
        "difficulty": "Medium",
        "topics": ["Array", "Two Pointers", "Sorting"],
        "name": "4Sum",
        "content": "Given an array `nums` of `n` integers, return an array of all the unique quadruplets `[nums[a], nums[b], nums[c], nums[d]]` such that:\n\n- `0 <= a, b, c, d < n`\n- `a`, `b`, `c`, and `d` are distinct\n- `nums[a] + nums[b] + nums[c] + nums[d] == target`\n\nYou may return the answer in any order."
    },
    {
        "id": 19,
        "difficulty": "Medium",
        "topics": ["Linked List", "Recursion"],
        "name": "Remove Nth Node From End of List",
        "content": "Given the `head` of a linked list, remove the `nth` node from the end of the list and return its head.\n\nFollow up: Could you do this in one pass?"
    },
    {
        "id": 20,
        "difficulty": "Easy",
        "topics": ["String", "Stack"],
        "name": "Valid Parentheses",
        "content": "Given a string `s` containing just the characters `'('`, `')'`, `'{'`, `'}'`, `'['` and `']'`, determine if the input string is valid.\n\nAn input string is valid if:\n\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order."
    },
    {
        "id": 21,
        "difficulty": "Easy",
        "topics": ["Linked List", "Recursion"],
        "name": "Merge Two Sorted Lists",
        "content": "Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists."
    },
    {
        "id": 22,
        "difficulty": "Medium",
        "topics": ["String", "Backtracking"],
        "name": "Generate Parentheses",
        "content": "Given `n` pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n\nFor example, given `n = 3`, a solution set is:\n```\n[\n  \"((()))\",\n  \"(()())\",\n  \"(())()\",\n  \"()(())\",\n  \"()()()\"\n]\n```"
    },
    {
        "id": 23,
        "difficulty": "Hard",
        "topics": ["Linked List", "Divide and Conquer", "Heap"],
        "name": "Merge k Sorted Lists",
        "content": "You are given an array of `k` linked-lists `lists`, each linked-list is sorted in ascending order.\n\nMerge all the linked-lists into one sorted linked-list and return it."
    },
    {
        "id": 24,
        "difficulty": "Medium",
        "topics": ["Linked List", "Recursion"],
        "name": "Swap Nodes in Pairs",
        "content": "Given a linked list, swap every two adjacent nodes and return its head.\n\nYou must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)"
    },
    {
        "id": 25,
        "difficulty": "Hard",
        "topics": ["Linked List", "Recursion"],
        "name": "Reverse Nodes in k-Group",
        "content": "Given a linked list, reverse the nodes of a linked list `k` at a time and return its modified list.\n\n`k` is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of `k` then left-out nodes, in the end, should remain as it is."
    },
    {
        "id": 26,
        "difficulty": "Easy",
        "topics": ["Array", "Two Pointers"],
        "name": "Remove Duplicates from Sorted Array",
        "content": "Given a sorted array `nums`, remove the duplicates in-place such that each element appears only once and returns the new length.\n\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with `O(1)` extra memory."
    },
    {
        "id": 27,
        "difficulty": "Easy",
        "topics": ["Array", "Two Pointers"],
        "name": "Remove Element",
        "content": "Given an array `nums` and a value `val`, remove all instances of that value in-place and return the new length.\n\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with `O(1)` extra memory."
    },
    {
        "id": 28,
        "difficulty": "Easy",
        "topics": ["Two Pointers", "String"],
        "name": "Implement strStr()",
        "content": "Return the index of the first occurrence of needle in haystack, or `-1` if `needle` is not part of `haystack`.\n\nClarification:\n\nWhat should we return when `needle` is an empty string? This is a great question to ask during an interview."
    },
    {
        "id": 29,
        "difficulty": "Medium",
        "topics": ["Math", "Two Pointers"],
        "name": "Divide Two Integers",
        "content": "Given two integers `dividend` and `divisor`, divide two integers without using multiplication, division, and mod operator.\n\nReturn the quotient after dividing `dividend` by `divisor`.\n\nThe integer division should truncate toward zero, which means losing its fractional part. For example, `8.345` would be truncated to `8`, and `-2.7335` would be truncated to `-2`."
    },
    {
        "id": 30,
        "difficulty": "Hard",
        "topics": ["Array", "Two Pointers"],
        "name": "Substring with Concatenation of All Words",
        "content": "You are given a string `s` and an array of strings `words` of the same length. Return all starting indices of substring(s) in `s` that is a concatenation of each word in `words` exactly once, in any order, and without any intervening characters.\n\nYou can return the answer in any order."
    },
    {
        "id": 31,
        "difficulty": "Medium",
        "topics": ["Array", "Two Pointers"],
        "name": "Next Permutation",
        "content": "Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\n\nIf such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).\n\nThe replacement must be in place and use only constant extra memory."
    },
    {
        "id": 32,
        "difficulty": "Hard",
        "topics": ["String", "Dynamic Programming", "Stack"],
        "name": "Longest Valid Parentheses",
        "content": "Given a string containing just the characters `'('` and `')'`, find the length of the longest valid (well-formed) parentheses substring."
    },
    {
        "id": 33,
        "difficulty": "Medium",
        "topics": ["Array", "Binary Search"],
        "name": "Search in Rotated Sorted Array",
        "content": "Given an integer array `nums` sorted in ascending order, and rotated at some pivot index (0-indexed) such that the resulting array is `[nums[pivot], nums[pivot+1], ..., nums[n-1], nums[0], nums[1], ..., nums[pivot-1]]` (0-indexed).\n\nYou are given a target value to search. If found in the array return its index, otherwise return `-1`.\n\nYou must write an algorithm with `O(log n)` runtime complexity."
    },
    {
        "id": 34,
        "difficulty": "Medium",
        "topics": ["Array", "Binary Search"],
        "name": "Find First and Last Position of Element in Sorted Array",
        "content": "Given an array of integers `nums` sorted in ascending order, find the starting and ending position of a given `target` value.\n\nIf target is not found in the array, return `[-1, -1]`.\n\nYou must write an algorithm with `O(log n)` runtime complexity."
    },
    {
        "id": 35,
        "difficulty": "Easy",
        "topics": ["Array", "Binary Search"],
        "name": "Search Insert Position",
        "content": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\nYou must write an algorithm with `O(log n)` runtime complexity."
    },
    {
        "id": 36,
        "difficulty": "Medium",
        "topics": ["Array", "Hash Table"],
        "name": "Valid Sudoku",
        "content": "Determine if a `9 x 9` Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n\n1. Each row must contain the digits `1-9` without repetition.\n2. Each column must contain the digits `1-9` without repetition.\n3. Each of the nine `3 x 3` sub-boxes of the grid must contain the digits `1-9` without repetition."
    },
    {
        "id": 37,
        "difficulty": "Hard",
        "topics": ["Array", "Backtracking", "Matrix"],
        "name": "Sudoku Solver",
        "content": "Write a program to solve a Sudoku puzzle by filling the empty cells.\n\nA sudoku solution must satisfy all of the following rules:\n\n1. Each of the digits `1-9` must occur exactly once in each row.\n2. Each of the digits `1-9` must occur exactly once in each column.\n3. Each of the digits `1-9` must occur exactly once in each of the 9 `3x3` sub-boxes of the grid."
    },
    {
        "id": 38,
        "difficulty": "Medium",
        "topics": ["String"],
        "name": "Count and Say",
        "content": "The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\n\n- `countAndSay(1) = \"1\"`\n- `countAndSay(n)` is the way you would \"say\" the digit string from `countAndSay(n-1)`, which is then converted into a different digit string.\n\nTo determine how you \"say\" a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character. Then for each group, say the number of characters, then say the character."
    },
    {
        "id": 39,
        "difficulty": "Medium",
        "topics": ["Array", "Backtracking"],
        "name": "Combination Sum",
        "content": "Given an array of distinct integers `candidates` and a target integer `target`, return a list of all unique combinations of `candidates` where the chosen numbers sum to `target`. You may return the combinations in any order.\n\nThe same number may be chosen from `candidates` an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different."
    },
    {
        "id": 40,
        "difficulty": "Medium",
        "topics": ["Array", "Backtracking"],
        "name": "Combination Sum II",
        "content": "Given a collection of candidate numbers (`candidates`) and a target number (`target`), find all unique combinations in `candidates` where the candidate numbers sum to `target`.\n\nEach number in `candidates` may only be used once in the combination.\n\nNote: The solution set must not contain duplicate combinations."
    },
    {
        "id": 41,
        "difficulty": "Hard",
        "topics": ["Array"],
        "name": "First Missing Positive",
        "content": "Given an unsorted integer array `nums`, find the smallest missing positive integer.\n\nYou must implement an algorithm that runs in `O(n)` time and uses constant extra space."
    },
    {
        "id": 42,
        "difficulty": "Hard",
        "topics": ["Array", "Dynamic Programming", "Stack"],
        "name": "Trapping Rain Water",
        "content": "Given `n` non-negative integers representing an elevation map where the width of each bar is `1`, compute how much water it can trap after raining."
    },
    {
        "id": 43,
        "difficulty": "Medium",
        "topics": ["Math", "String", "Simulation"],
        "name": "Multiply Strings",
        "content": "Given two non-negative integers `num1` and `num2` represented as strings, return the product of `num1` and `num2`, also represented as a string.\n\nNote: You must not use any built-in BigInteger library or convert the inputs to integer directly."
    },
    {
        "id": 44,
        "difficulty": "Hard",
        "topics": ["Array", "String", "Dynamic Programming", "Backtracking"],
        "name": "Wildcard Matching",
        "content": "Given an input string `s` and a pattern `p`, implement wildcard pattern matching with support for `'?'` and `'*'` where:\n\n- `'?'` Matches any single character.\n- `'*'` Matches any sequence of characters (including the empty sequence)."
    },
    {
        "id": 45,
        "difficulty": "Medium",
        "topics": ["Array", "Backtracking"],
        "name": "Jump Game II",
        "content": "Given an array of non-negative integers `nums`, you are initially positioned at the first index of the array.\n\nEach element in the array represents your maximum jump length at that position.\n\nYour goal is to reach the last index in the minimum number of jumps.\n\nYou can assume that you can always reach the last index."
    },
    {
        "id": 46,
        "difficulty": "Medium",
        "topics": ["Array", "Backtracking"],
        "name": "Permutations",
        "content": "Given an array `nums` of distinct integers, return all the possible permutations. You can return the answer in any order."
    },
    {
        "id": 47,
        "difficulty": "Medium",
        "topics": ["Array", "Backtracking"],
        "name": "Permutations II",
        "content": "Given a collection of numbers, `nums`, that might contain duplicates, return all possible unique permutations in any order."
    },
    {
        "id": 48,
        "difficulty": "Medium",
        "topics": ["Array", "Math", "Matrix"],
        "name": "Rotate Image",
        "content": "You are given an `n x n` 2D `matrix` representing an image, rotate the image by 90 degrees (clockwise).\n\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation."
    },
    {
        "id": 49,
        "difficulty": "Medium",
        "topics": ["Array", "Hash Table", "String", "Sorting"],
        "name": "Group Anagrams",
        "content": "Given an array of strings `strs`, group the anagrams together. You can return the answer in any order.\n\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."
    },
    {
        "id": 50,
        "difficulty": "Medium",
        "topics": ["Math", "Recursion"],
        "name": "Pow(x, n)",
        "content": "Implement `pow(x, n)`, which calculates `x` raised to the power `n` (i.e., `x^n`)."
    },
    {
        "id": 51,
        "difficulty": "Hard",
        "topics": ["Array", "Backtracking"],
        "name": "N-Queens",
        "content": "The n-queens puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other.\n\nGiven an integer `n`, return all distinct solutions to the n-queens puzzle. You may return the answer in any order."
    },
    {
        "id": 52,
        "difficulty": "Hard",
        "topics": ["Backtracking"],
        "name": "N-Queens II",
        "content": "The n-queens puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other.\n\nGiven an integer `n`, return the number of distinct solutions to the n-queens puzzle."
    },
    {
        "id": 53,
        "difficulty": "Easy",
        "topics": ["Array", "Divide and Conquer", "Dynamic Programming"],
        "name": "Maximum Subarray",
        "content": "Given an integer array `nums`, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum."
    },
    {
        "id": 54,
        "difficulty": "Medium",
        "topics": ["Array", "Matrix", "Simulation"],
        "name": "Spiral Matrix",
        "content": "Given an `m x n` `matrix`, return all elements of the matrix in spiral order."
    },
    {
        "id": 55,
        "difficulty": "Medium",
        "topics": ["Array", "Greedy"],
        "name": "Jump Game",
        "content": "Given an array of non-negative integers `nums`, you are initially positioned at the first index of the array.\n\nEach element in the array represents your maximum jump length at that position.\n\nDetermine if you are able to reach the last index."
    },
    {
        "id": 56,
        "difficulty": "Medium",
        "topics": ["Array", "Sorting"],
        "name": "Merge Intervals",
        "content": "Given an array of `intervals` where `intervals[i] = [starti, endi]`, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input."
    },
    {
        "id": 57,
        "difficulty": "Medium",
        "topics": ["Array", "Sorting"],
        "name": "Insert Interval",
        "content": "Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).\n\nYou may assume that the intervals were initially sorted according to their start times."
    },
    {
        "id": 58,
        "difficulty": "Easy",
        "topics": ["String"],
        "name": "Length of Last Word",
        "content": "Given a string `s` consisting of words and spaces, return the length of the last word in the string.\n\nA word is a maximal substring consisting of non-space characters only."
    },
    {
        "id": 59,
        "difficulty": "Medium",
        "topics": ["Array", "Matrix", "Simulation"],
        "name": "Spiral Matrix II",
        "content": "Given a positive integer `n`, generate an `n x n` matrix filled with elements from `1` to `n^2` in spiral order."
    },
    {
        "id": 60,
        "difficulty": "Hard",
        "topics": ["Math", "Backtracking"],
        "name": "Permutation Sequence",
        "content": "The set `[1, 2, 3, ..., n]` contains a total of `n!` unique permutations.\n\nGiven `n` and `k`, return the `kth` permutation sequence."
    },
    {
        "id": 61,
        "difficulty": "Medium",
        "topics": ["Linked List", "Two Pointers"],
        "name": "Rotate List",
        "content": "Given the `head` of a linked list, rotate the list to the right by `k` places."
    },
    {
        "id": 62,
        "difficulty": "Medium",
        "topics": ["Math", "Dynamic Programming", "Combinatorics"],
        "name": "Unique Paths",
        "content": "A robot is located at the top-left corner of a `m x n` grid.\n\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid.\n\nHow many possible unique paths are there?"
    },
    {
        "id": 63,
        "difficulty": "Medium",
        "topics": ["Math", "Dynamic Programming"],
        "name": "Unique Paths II",
        "content": "A robot is located at the top-left corner of a `m x n` grid.\n\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid.\n\nNow consider if some obstacles are added to the grids. How many unique paths would there be?\n\nAn obstacle and space is marked as `1` and `0` respectively in the grid."
    },
    {
        "id": 64,
        "difficulty": "Medium",
        "topics": ["Array", "Dynamic Programming"],
        "name": "Minimum Path Sum",
        "content": "Given a `m x n` `grid` filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\n\nNote: You can only move either down or right at any point in time."
    },
    {
        "id": 65,
        "difficulty": "Easy",
        "topics": ["Math", "String"],
        "name": "Valid Number",
        "content": "A valid number can be split up into these components (in order):\n\n1. A decimal number or an integer.\n2. (Optional) An `'e'` or `'E'`, followed by an integer.\n\nA decimal number can be split up into these components (in order):\n\n1. (Optional) A sign character (either `'+'` or `'-'`).\n2. One of the following formats:\n   - One or more digits, followed by a dot `'.'`.\n   - One or more digits, followed by a dot `'.'`, followed by one or more digits.\n   - A dot `'.'`, followed by one or more digits."
    },
    {
        "id": 66,
        "difficulty": "Easy",
        "topics": ["Array", "Math"],
        "name": "Plus One",
        "content": "Given a non-empty array of decimal digits representing a non-negative integer, increment one to the integer.\n\nThe digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.\n\nYou may assume the integer does not contain any leading zero, except the number 0 itself."
    },
    {
        "id": 67,
        "difficulty": "Easy",
        "topics": ["Math", "String", "Bit Manipulation"],
        "name": "Add Binary",
        "content": "Given two binary strings `a` and `b`, return their sum as a binary string."
    },
    {
        "id": 68,
        "difficulty": "Hard",
        "topics": ["String"],
        "name": "Text Justification",
        "content": "Given an array of strings `words` and a width `maxWidth`, format the text such that each line has exactly `maxWidth` characters and is fully (left and right) justified.\n\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces `' '` when necessary so that each line has exactly `maxWidth` characters.\n\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\n\nFor the last line of text, it should be left-justified, and no extra space is inserted between words."
    },
    {
        "id": 69,
        "difficulty": "Easy",
        "topics": ["Math", "Binary Search"],
        "name": "Sqrt(x)",
        "content": "Given a non-negative integer `x`, compute and return the square root of `x`.\n\nSince the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned."
    },
    {
        "id": 70,
        "difficulty": "Easy",
        "topics": ["Math", "Dynamic Programming"],
        "name": "Climbing Stairs",
        "content": "You are climbing a staircase. It takes `n` steps to reach the top.\n\nEach time you can either climb `1` or `2` steps. In how many distinct ways can you climb to the top?"
    },
    {
        "id": 71,
        "difficulty": "Medium",
        "topics": ["String", "Stack"],
        "name": "Simplify Path",
        "content": "Given a string `path`, which is an absolute path (starting with a slash `'/'`) to a file or directory in a Unix-style file system, convert it to the simplified canonical path.\n\nIn a Unix-style file system, a period `'.'` refers to the current directory, a double period `'..'` refers to the directory up a level, and any multiple consecutive slashes (i.e. `'//'`) are treated as a single slash `'/'`. For this problem, any other format of periods such as `'...'` are treated as file/directory names."
    },
    {
        "id": 72,
        "difficulty": "Hard",
        "topics": ["String", "Dynamic Programming"],
        "name": "Edit Distance",
        "content": "Given two strings `word1` and `word2`, return the minimum number of operations required to convert `word1` to `word2`.\n\nYou have the following three operations permitted on a word:\n- Insert a character\n- Delete a character\n- Replace a character"
    },
    {
        "id": 73,
        "difficulty": "Medium",
        "topics": ["Array", "Two Pointers"],
        "name": "Set Matrix Zeroes",
        "content": "Given an `m x n` integer matrix `matrix`, if an element is `0`, set its entire row and column to `0`'s.\n\nYou must do it in place."
    },
    {
        "id": 74,
        "difficulty": "Medium",
        "topics": ["Array", "Binary Search", "Matrix"],
        "name": "Search a 2D Matrix",
        "content": "Write an efficient algorithm that searches for a value in an `m x n` matrix. This matrix has the following properties:\n\n- Integers in each row are sorted from left to right.\n- The first integer of each row is greater than the last integer of the previous row."
    },
    {
        "id": 75,
        "difficulty": "Medium",
        "topics": ["Array", "Two Pointers", "Sorting"],
        "name": "Sort Colors",
        "content": "Given an array `nums` with `n` objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\n\nWe will use the integers `0`, `1`, and `2` to represent the color red, white, and blue, respectively."
    },
    {
        "id": 76,
        "difficulty": "Hard",
        "topics": ["Hash Table", "String", "Sliding Window"],
        "name": "Minimum Window Substring",
        "content": "Given two strings `s` and `t`, return the minimum window in `s` which will contain all the characters in `t`. If there is no such window in `s` that covers all characters in `t`, return the empty string `\"\"`.\n\nNote that If there is such a window, it is guaranteed that there will always be only one unique minimum window in `s`."
    },
    {
        "id": 77,
        "difficulty": "Medium",
        "topics": ["Array", "Backtracking"],
        "name": "Combinations",
        "content": "Given two integers `n` and `k`, return all possible combinations of `k` numbers out of the range `[1, n]`.\n\nYou may return the answer in any order."
    },
    {
        "id": 78,
        "difficulty": "Medium",
        "topics": ["Array", "Backtracking", "Bit Manipulation"],
        "name": "Subsets",
        "content": "Given an integer array `nums` of unique elements, return all possible subsets (the power set).\n\nThe solution set must not contain duplicate subsets. Return the solution in any order."
    },
    {
        "id": 79,
        "difficulty": "Medium",
        "topics": ["Array", "Backtracking", "Matrix"],
        "name": "Word Search",
        "content": "Given an `m x n` grid of characters `board` and a string `word`, return `true` if `word` exists in the grid.\n\nThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once."
    },
    {
        "id": 80,
        "difficulty": "Medium",
        "topics": ["Array", "Two Pointers", "Sorting"],
        "name": "Remove Duplicates from Sorted Array II",
        "content": "Given a sorted array `nums`, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.\n\nDo not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory."
    },
    {
        "id": 81,
        "difficulty": "Medium",
        "topics": ["String", "Stack"],
        "name": "Search in Rotated Sorted Array II",
        "content": "There is an integer array `nums` sorted in non-decreasing order (not necessarily with distinct values).\n\nBefore being passed to your function, `nums` is rotated at an unknown pivot index `k` (`0 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (0-indexed).\n\nGiven the array `nums` after the rotation and an integer `target`, return `true` if `target` is in `nums`, or `false` if it is not in `nums`."
    },
    {
        "id": 82,
        "difficulty": "Medium",
        "topics": ["Linked List"],
        "name": "Remove Duplicates from Sorted List II",
        "content": "Given the `head` of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well."
    },
    {
        "id": 83,
        "difficulty": "Easy",
        "topics": ["Linked List"],
        "name": "Remove Duplicates from Sorted List",
        "content": "Given the `head` of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well."
    },
    {
        "id": 84,
        "difficulty": "Hard",
        "topics": ["Array", "Stack", "Monotonic Stack"],
        "name": "Largest Rectangle in Histogram",
        "content": "Given an array of integers `heights` representing the histogram's bar height where the width of each bar is `1`, return the area of the largest rectangle in the histogram."
    },
    {
        "id": 85,
        "difficulty": "Hard",
        "topics": ["Array", "Dynamic Programming", "Matrix", "Stack"],
        "name": "Maximal Rectangle",
        "content": "Given a `rows x cols` binary `matrix` filled with `0`'s and `1`'s, find the largest rectangle containing only `1`'s and return its area."
    },
    {
        "id": 86,
        "difficulty": "Medium",
        "topics": ["Two Pointers", "String"],
        "name": "Partition List",
        "content": "Given the `head` of a linked list and a value `x`, partition it such that all nodes less than `x` come before nodes greater than or equal to `x`.\n\nYou should preserve the original relative order of the nodes in each of the two partitions."
    },
    {
        "id": 87,
        "difficulty": "Hard",
        "topics": ["String", "Dynamic Programming", "Backtracking"],
        "name": "Scramble String",
        "content": "We can scramble a string s to get a string t using the following algorithm:\n\n1. If the length of the string is 1, stop\n2. If the length of the string is > 1, do the following:\n   - Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.\n   - Randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.\n   - Apply step 1 recursively on each of the two substrings x and y.\n\nGiven two strings `s1` and `s2` of the same length, return `true` if `s2` is a scrambled string of `s1`, otherwise return `false`."
    },
    {
        "id": 88,
        "difficulty": "Easy",
        "topics": ["Array", "Two Pointers"],
        "name": "Merge Sorted Array",
        "content": "Given two sorted integer arrays `nums1` and `nums2`, merge `nums2` into `nums1` as one sorted array.\n\nThe number of elements initialized in `nums1` and `nums2` are `m` and `n` respectively. You may assume that `nums1` has a size equal to `m + n` such that it has enough space to hold additional elements from `nums2`."
    },
    {
        "id": 89,
        "difficulty": "Medium",
        "topics": ["Math", "Dynamic Programming", "Backtracking"],
        "name": "Gray Code",
        "content": "An n-bit gray code sequence is a sequence of `2^n` integers where:\n\n- Every integer is in the inclusive range `[0, 2^n - 1]`\n- The first integer is `0`\n- An integer appears no more than once in the sequence\n- The binary representation of every pair of adjacent integers differs by exactly one bit\n- The binary representation of the first and last integers differs by exactly one bit\n\nGiven an integer `n`, return any valid n-bit gray code sequence."
    },
    {
        "id": 90,
        "difficulty": "Medium",
        "topics": ["Array", "Backtracking"],
        "name": "Subsets II",
        "content": "Given an integer array `nums` that may contain duplicates, return all possible subsets (the power set).\n\nThe solution set must not contain duplicate subsets. Return the solution in any order."
    },
    {
        "id": 91,
        "difficulty": "Medium",
        "topics": ["String", "Dynamic Programming"],
        "name": "Decode Ways",
        "content": "A message containing letters from `A-Z` can be encoded into numbers using the following mapping:\n\n```\n'A' -> \"1\"\n'B' -> \"2\"\n...\n'Z' -> \"26\"\n```\n\nTo decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, `\"11106\"` can be mapped into:\n\n- `\"AAJF\"` with the grouping `(1 1 10 6)`\n- `\"KJF\"` with the grouping `(11 10 6)`\n\nNote that the grouping `(1 11 06)` is invalid because `\"06\"` cannot be mapped into `'F'` since `\"6\"` is different from `\"06\"`.\n\nGiven a string `s` containing only digits, return the number of ways to decode it."
    },
    {
        "id": 92,
        "difficulty": "Medium",
        "topics": ["Linked List", "Recursion"],
        "name": "Reverse Linked List II",
        "content": "Given the `head` of a singly linked list and two integers `left` and `right` where `left <= right`, reverse the nodes of the list from position `left` to position `right`, and return the reversed list."
    },
    {
        "id": 93,
        "difficulty": "Hard",
        "topics": ["String", "Backtracking"],
        "name": "Restore IP Addresses",
        "content": "A valid IP address consists of exactly four integers separated by single dots. Each integer is between `0` and `255` (inclusive) and cannot have leading zeros.\n\nFor example:\n- `\"0.1.2.201\"` and `\"192.168.1.1\"` are valid IP addresses\n- `\"0.011.255.245\"`, `\"192.168.1.312\"` and `\"192.168@1.1\"` are invalid IP addresses\n\nGiven a string `s` containing only digits, return all possible valid IP addresses that can be formed by inserting dots into `s`. You are not allowed to reorder or remove any digits in `s`. You may return the valid IP addresses in any order."
    },
    {
        "id": 94,
        "difficulty": "Medium",
        "topics": ["Tree", "Depth-First Search", "Binary Tree"],
        "name": "Binary Tree Inorder Traversal",
        "content": "Given the `root` of a binary tree, return the inorder traversal of its nodes' values."
    },
    {
        "id": 95,
        "difficulty": "Medium",
        "topics": ["Dynamic Programming", "Tree", "Binary Search Tree", "Binary Tree"],
        "name": "Unique Binary Search Trees II",
        "content": "Given an integer `n`, return all the structurally unique BST's (binary search trees), which has exactly `n` nodes of unique values from `1` to `n`. Return the answer in any order."
    },
    {
        "id": 96,
        "difficulty": "Medium",
        "topics": ["Math", "Dynamic Programming", "Tree", "Binary Search Tree", "Binary Tree"],
        "name": "Unique Binary Search Trees",
        "content": "Given an integer `n`, return the number of structurally unique BST's (binary search trees) which has exactly `n` nodes of unique values from `1` to `n`."
    },
    {
        "id": 97,
        "difficulty": "Medium",
        "topics": ["String", "Dynamic Programming"],
        "name": "Interleaving String",
        "content": "Given strings `s1`, `s2`, and `s3`, find whether `s3` is formed by an interleaving of `s1` and `s2`.\n\nAn interleaving of two strings `s` and `t` is a configuration where they are divided into non-empty substrings such that:\n\n- `s = s1 + s2 + ... + sn`\n- `t = t1 + t2 + ... + tm`\n- `|n - m| <= 1`\n- The interleaving is `s1 + t1 + s2 + t2 + s3 + t3 + ...` or `t1 + s1 + t2 + s2 + t3 + s3 + ...`\n\nNote: `a + b` is the concatenation of strings `a` and `b`."
    },
    {
        "id": 98,
        "difficulty": "Medium",
        "topics": ["Tree", "Depth-First Search", "Binary Search Tree", "Binary Tree"],
        "name": "Validate Binary Search Tree",
        "content": "Given the `root` of a binary tree, determine if it is a valid binary search tree (BST).\n\nA valid BST is defined as follows:\n- The left subtree of a node contains only nodes with keys less than the node's key.\n- The right subtree of a node contains only nodes with keys greater than the node's key.\n- Both the left and right subtrees must also be binary search trees."
    },
    {
        "id": 99,
        "difficulty": "Medium",
        "topics": ["Tree", "Depth-First Search", "Breadth-First Search", "Binary Tree"],
        "name": "Recover Binary Search Tree",
        "content": "You are given the `root` of a binary search tree (BST), where exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure."
    },
    {
        "id": 100,
        "difficulty": "Easy",
        "topics": ["Tree", "Depth-First Search", "Breadth-First Search", "Binary Tree"],
        "name": "Same Tree",
        "content": "Given the roots of two binary trees `p` and `q`, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value."
    },
    {
        "id": 101,
        "difficulty": "Easy",
        "topics": ["Tree", "Depth-First Search", "Breadth-First Search", "Binary Tree"],
        "name": "Symmetric Tree",
        "content": "Given the `root` of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center)."
    },
    {
        "id": 102,
        "difficulty": "Medium",
        "topics": ["Tree", "Breadth-First Search", "Binary Tree"],
        "name": "Binary Tree Level Order Traversal",
        "content": "Given the `root` of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level)."
    },
    {
        "id": 103,
        "difficulty": "Medium",
        "topics": ["Tree", "Breadth-First Search", "Binary Tree"],
        "name": "Binary Tree Zigzag Level Order Traversal",
        "content": "Given the `root` of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between)."
    },
    {
        "id": 104,
        "difficulty": "Easy",
        "topics": ["Tree", "Depth-First Search", "Binary Tree"],
        "name": "Maximum Depth of Binary Tree",
        "content": "Given the `root` of a binary tree, return its maximum depth.\n\nA binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node."
    },
    {
        "id": 105,
        "difficulty": "Medium",
        "topics": ["Array", "Tree", "Divide and Conquer", "Binary Tree"],
        "name": "Construct Binary Tree from Preorder and Inorder Traversal",
        "content": "Given two integer arrays `preorder` and `inorder` where `preorder` is the preorder traversal of a binary tree and `inorder` is the inorder traversal of the same tree, construct and return the binary tree."
    },
    {
        "id": 106,
        "difficulty": "Medium",
        "topics": ["Array", "Tree", "Divide and Conquer", "Binary Tree"],
        "name": "Construct Binary Tree from Inorder and Postorder Traversal",
        "content": "Given two integer arrays `inorder` and `postorder` where `inorder` is the inorder traversal of a binary tree and `postorder` is the postorder traversal of the same tree, construct and return the binary tree."
    },
    {
        "id": 107,
        "difficulty": "Medium",
        "topics": ["Tree", "Breadth-First Search", "Binary Tree"],
        "name": "Binary Tree Level Order Traversal II",
        "content": "Given the `root` of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root)."
    },
    {
        "id": 108,
        "difficulty": "Easy",
        "topics": ["Array", "Divide and Conquer", "Tree", "Binary Search Tree", "Binary Tree"],
        "name": "Convert Sorted Array to Binary Search Tree",
        "content": "Given an integer array `nums` where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n\nA height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."
    },
    {
        "id": 109,
        "difficulty": "Medium",
        "topics": ["Linked List", "Divide and Conquer", "Tree", "Binary Search Tree", "Binary Tree"],
        "name": "Convert Sorted List to Binary Search Tree",
        "content": "Given the `head` of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.\n\nFor this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1."
    },
    {
        "id": 110,
        "difficulty": "Easy",
        "topics": ["Tree", "Depth-First Search", "Binary Tree"],
        "name": "Balanced Binary Tree",
        "content": "Given a binary tree, determine if it is height-balanced.\n\nFor this problem, a height-balanced binary tree is defined as:\n\nA binary tree in which the left and right subtrees of every node differ in height by no more than one."
    },
    {
        "id": 111,
        "difficulty": "Easy",
        "topics": ["Tree", "Depth-First Search", "Breadth-First Search", "Binary Tree"],
        "name": "Minimum Depth of Binary Tree",
        "content": "Given a binary tree, find its minimum depth.\n\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node."
    },
    {
        "id": 112,
        "difficulty": "Easy",
        "topics": ["Tree", "Depth-First Search", "Binary Tree"],
        "name": "Path Sum",
        "content": "Given the `root` of a binary tree and an integer `targetSum`, return `true` if the tree has a root-to-leaf path such that adding up all the values along the path equals `targetSum`.\n\nA leaf is a node with no children."
    },
    {
        "id": 113,
        "difficulty": "Medium",
        "topics": ["Tree", "Depth-First Search", "Binary Tree", "Backtracking"],
        "name": "Path Sum II",
        "content": "Given the `root` of a binary tree and an integer `targetSum`, return all root-to-leaf paths where the sum of the node values in the path equals `targetSum`. Each path should be returned as a list of the node values, not node references.\n\nA root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children."
    },
    {
        "id": 114,
        "difficulty": "Medium",
        "topics": ["Linked List", "Tree", "Depth-First Search", "Binary Tree"],
        "name": "Flatten Binary Tree to Linked List",
        "content": "Given the `root` of a binary tree, flatten the tree into a \"linked list\":\n\n- The \"linked list\" should use the same `TreeNode` class where the `right` child pointer points to the next node in the list and the `left` child pointer is always `null`.\n- The \"linked list\" should be in the same order as a pre-order traversal of the binary tree."
    },
    {
        "id": 115,
        "difficulty": "Hard",
        "topics": ["String", "Dynamic Programming"],
        "name": "Distinct Subsequences",
        "content": "Given two strings `s` and `t`, return the number of distinct subsequences of `s` which equals `t`.\n\nA subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., `\"ACE\"` is a subsequence of `\"ABCDE\"` while `\"AEC\"` is not)."
    },
    {
        "id": 116,
        "difficulty": "Medium",
        "topics": ["Tree", "Depth-First Search", "Binary Tree"],
        "name": "Populating Next Right Pointers in Each Node",
        "content": "You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`.\n\nInitially, all next pointers are set to `NULL`."
    },
    {
        "id": 117,
        "difficulty": "Medium",
        "topics": ["Tree", "Depth-First Search", "Breadth-First Search", "Binary Tree"],
        "name": "Populating Next Right Pointers in Each Node II",
        "content": "Given a binary tree, populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`.\n\nInitially, all next pointers are set to `NULL`."
    },
    {
        "id": 118,
        "difficulty": "Easy",
        "topics": ["Array", "Dynamic Programming"],
        "name": "Pascal's Triangle",
        "content": "Given an integer `numRows`, return the first numRows of Pascal's triangle.\n\nIn Pascal's triangle, each number is the sum of the two numbers directly above it."
    },
    {
        "id": 119,
        "difficulty": "Easy",
        "topics": ["Array", "Dynamic Programming"],
        "name": "Pascal's Triangle II",
        "content": "Given an integer `rowIndex`, return the rowIndexth (0-indexed) row of the Pascal's triangle.\n\nIn Pascal's triangle, each number is the sum of the two numbers directly above it."
    },
    {
        "id": 120,
        "difficulty": "Medium",
        "topics": ["Array", "Dynamic Programming"],
        "name": "Triangle",
        "content": "Given a `triangle` array, return the minimum path sum from top to bottom.\n\nFor each step, you may move to an adjacent number of the row below. More formally, if you are on index `i` on the current row, you may move to either index `i` or index `i + 1` on the next row."
    },
    {
        "id": 121,
        "difficulty": "Easy",
        "topics": ["Array", "Dynamic Programming"],
        "name": "Best Time to Buy and Sell Stock",
        "content": "You are given an array `prices` where `prices[i]` is the price of a given stock on the ith day.\n\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return `0`."
    },
    {
        "id": 122,
        "difficulty": "Medium",
        "topics": ["Array", "Dynamic Programming", "Greedy"],
        "name": "Best Time to Buy and Sell Stock II",
        "content": "You are given an integer array `prices` where `prices[i]` is the price of a given stock on the ith day.\n\nOn each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.\n\nFind and return the maximum profit you can achieve."
    },
    {
        "id": 123,
        "difficulty": "Hard",
        "topics": ["Array", "Dynamic Programming"],
        "name": "Best Time to Buy and Sell Stock III",
        "content": "You are given an array `prices` where `prices[i]` is the price of a given stock on the ith day.\n\nFind the maximum profit you can achieve. You may complete at most two transactions.\n\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again)."
    },
    {
        "id": 124,
        "difficulty": "Hard",
        "topics": ["Tree", "Depth-First Search", "Dynamic Programming", "Binary Tree"],
        "name": "Binary Tree Maximum Path Sum",
        "content": "A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\n\nThe path sum of a path is the sum of the node's values in the path.\n\nGiven the `root` of a binary tree, return the maximum path sum of any non-empty path."
    },
    {
        "id": 125,
        "difficulty": "Easy",
        "topics": ["Two Pointers", "String"],
        "name": "Valid Palindrome",
        "content": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\n\nGiven a string `s`, return `true` if it is a palindrome, or `false` otherwise."
    },
    {
        "id": 126,
        "difficulty": "Hard",
        "topics": ["Hash Table", "String", "Breadth-First Search"],
        "name": "Word Ladder II",
        "content": "A transformation sequence from word `beginWord` to word `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk` such that:\n\n- Every adjacent pair of words differs by a single letter.\n- Every `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.\n- `sk == endWord`\n\nGiven two words, `beginWord` and `endWord`, and a dictionary `wordList`, return all the shortest transformation sequences from `beginWord` to `endWord`, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words `[beginWord, s1, s2, ..., sk]`."
    },
    {
        "id": 127,
        "difficulty": "Hard",
        "topics": ["Hash Table", "String", "Breadth-First Search"],
        "name": "Word Ladder",
        "content": "A transformation sequence from word `beginWord` to word `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk` such that:\n\n- Every adjacent pair of words differs by a single letter.\n- Every `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.\n- `sk == endWord`\n\nGiven two words `beginWord` and `endWord`, and a dictionary `wordList`, return the number of words in the shortest transformation sequence from `beginWord` to `endWord`, or `0` if no such sequence exists."
    },
    {
        "id": 128,
        "difficulty": "Medium",
        "topics": ["Array", "Hash Table", "Union Find"],
        "name": "Longest Consecutive Sequence",
        "content": "Given an unsorted array of integers `nums`, return the length of the longest consecutive elements sequence.\n\nYou must write an algorithm that runs in `O(n)` time."
    },
    {
        "id": 129,
        "difficulty": "Medium",
        "topics": ["Tree", "Depth-First Search", "Binary Tree"],
        "name": "Sum Root to Leaf Numbers",
        "content": "You are given the `root` of a binary tree containing digits from `0` to `9` only.\n\nEach root-to-leaf path in the tree represents a number.\n\n- For example, the root-to-leaf path `1 -> 2 -> 3` represents the number `123`.\n\nReturn the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer."
    },
    {
        "id": 130,
        "difficulty": "Hard",
        "topics": ["Array", "Depth-First Search", "Breadth-First Search", "Union Find", "Matrix"],
        "name": "Surrounded Regions",
        "content": "Given an `m x n` matrix `board` containing `'X'` and `'O'`, capture all regions that are 4-directionally surrounded by `'X'`.\n\nA region is captured by flipping all `'O'`s into `'X'`s in that surrounded region."
    },
    {
        "id": 131,
        "difficulty": "Medium",
        "topics": ["String", "Dynamic Programming", "Backtracking"],
        "name": "Palindrome Partitioning",
        "content": "Given a string `s`, partition `s` such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of `s`.\n\nA palindrome string is a string that reads the same backward as forward."
    },
    {
        "id": 132,
        "difficulty": "Hard",
        "topics": ["String", "Dynamic Programming"],
        "name": "Palindrome Partitioning II",
        "content": "Given a string `s`, partition `s` such that every substring of the partition is a palindrome.\n\nReturn the minimum cuts needed for a palindrome partitioning of `s`."
    },
    {
        "id": 133,
        "difficulty": "Medium",
        "topics": ["Hash Table", "Graph"],
        "name": "Clone Graph",
        "content": "Given a reference of a node in a connected undirected graph.\n\nReturn a deep copy (clone) of the graph.\n\nEach node in the graph contains a value (`int`) and a list (`List[Node]`) of its neighbors."
    },
    {
        "id": 134,
        "difficulty": "Medium",
        "topics": ["Array", "Greedy"],
        "name": "Gas Station",
        "content": "There are `n` gas stations along a circular route, where the amount of gas at the `ith` station is `gas[i]`.\n\nYou have a car with an unlimited gas tank and it costs `cost[i]` of gas to travel from the `ith` station to its next `(i + 1)th` station. You begin the journey with an empty tank at one of the gas stations.\n\nGiven two integer arrays `gas` and `cost`, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return `-1`. If there exists a solution, it is guaranteed to be unique."
    },
    {
        "id": 135,
        "difficulty": "Hard",
        "topics": ["Array", "Greedy"],
        "name": "Candy",
        "content": "There are `n` children standing in a line. Each child is assigned a rating value given in the integer array `ratings`.\n\nYou are giving candies to these children subjected to the following requirements:\n- Each child must have at least one candy.\n- Children with a higher rating get more candies than their neighbors.\n\nReturn the minimum number of candies you need to have to distribute the candies to the children."
    },
    {
        "id": 136,
        "difficulty": "Easy",
        "topics": ["Array", "Bit Manipulation"],
        "name": "Single Number",
        "content": "Given a non-empty array of integers `nums`, every element appears twice except for one. Find that single one.\n\nYou must implement a solution with a linear runtime complexity and use only constant extra space."
    },
    {
        "id": 137,
        "difficulty": "Medium",
        "topics": ["Array", "Bit Manipulation"],
        "name": "Single Number II",
        "content": "Given an integer array `nums` where every element appears three times except for one, which appears exactly once. Find the single element and return it.\n\nYou must implement a solution with a linear runtime complexity and use only constant extra space."
    },
    {
        "id": 138,
        "difficulty": "Medium",
        "topics": ["Hash Table", "Linked List"],
        "name": "Copy List with Random Pointer",
        "content": "A linked list of length `n` is given such that each node contains an additional random pointer, which could point to any node in the list, or `null`.\n\nConstruct a deep copy of the list. The deep copy should consist of exactly `n` brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the `next` and `random` pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list."
    },
    {
        "id": 139,
        "difficulty": "Medium",
        "topics": ["Hash Table", "String", "Dynamic Programming", "Trie"],
        "name": "Word Break",
        "content": "Given a string `s` and a dictionary of strings `wordDict`, return `true` if `s` can be segmented into a space-separated sequence of one or more dictionary words.\n\nNote that the same word in the dictionary may be reused multiple times in the segmentation."
    },
    {
        "id": 140,
        "difficulty": "Hard",
        "topics": ["Hash Table", "String", "Dynamic Programming", "Backtracking", "Trie"],
        "name": "Word Break II",
        "content": "Given a string `s` and a dictionary of strings `wordDict`, add spaces in `s` to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.\n\nNote that the same word in the dictionary may be reused multiple times in the segmentation."
    },
    {
        "id": 141,
        "difficulty": "Easy",
        "topics": ["Hash Table", "Linked List", "Two Pointers"],
        "name": "Linked List Cycle",
        "content": "Given `head`, the head of a linked list, determine if the linked list has a cycle in it.\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to. Note that `pos` is not passed as a parameter.\n\nReturn `true` if there is a cycle in the linked list. Otherwise, return `false`."
    },
    {
        "id": 142,
        "difficulty": "Medium",
        "topics": ["Hash Table", "Linked List", "Two Pointers"],
        "name": "Linked List Cycle II",
        "content": "Given the `head` of a linked list, return the node where the cycle begins. If there is no cycle, return `null`.\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to (0-indexed). It is `-1` if there is no cycle. Note that `pos` is not passed as a parameter."
    },
    {
        "id": 143,
        "difficulty": "Medium",
        "topics": ["Linked List", "Two Pointers", "Stack", "Recursion"],
        "name": "Reorder List",
        "content": "You are given the head of a singly linked-list. The list can be represented as:\n\n`L0 → L1 → … → Ln - 1 → Ln`\n\nReorder the list to be on the following form:\n\n`L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …`\n\nYou may not modify the values in the list's nodes. Only nodes themselves may be changed."
    },
    {
        "id": 144,
        "difficulty": "Easy",
        "topics": ["Stack", "Tree", "Depth-First Search", "Binary Tree"],
        "name": "Binary Tree Preorder Traversal",
        "content": "Given the `root` of a binary tree, return the preorder traversal of its nodes' values."
    },
    {
        "id": 145,
        "difficulty": "Easy",
        "topics": ["Stack", "Tree", "Depth-First Search", "Binary Tree"],
        "name": "Binary Tree Postorder Traversal",
        "content": "Given the `root` of a binary tree, return the postorder traversal of its nodes' values."
    },
        {
            "id": 146,
            "difficulty": "Medium",
            "topics": ["Hash Table", "Linked List", "Design"],
            "name": "LRU Cache",
            "content": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\n\nImplement the `LRUCache` class:\n- `LRUCache(int capacity)` Initialize the LRU cache with positive size `capacity`.\n- `int get(int key)` Return the value of the `key` if the key exists, otherwise return `-1`.\n- `void put(int key, int value)` Update the value of the `key` if the `key` exists. Otherwise, add the `key-value` pair to the cache. If the number of keys exceeds the `capacity` from this operation, evict the least recently used key."
        },
        {
            "id": 147,
            "difficulty": "Medium",
            "topics": ["Linked List", "Sorting"],
            "name": "Insertion Sort List",
            "content": "Given the `head` of a singly linked list, sort the list using insertion sort, and return the sorted list's head."
        },
        {
            "id": 148,
            "difficulty": "Medium",
            "topics": ["Linked List", "Two Pointers", "Divide and Conquer", "Sorting", "Merge Sort"],
            "name": "Sort List",
            "content": "Given the `head` of a linked list, return the list after sorting it in ascending order."
        },
        {
            "id": 149,
            "difficulty": "Hard",
            "topics": ["Array", "Hash Table", "Math", "Geometry"],
            "name": "Max Points on a Line",
            "content": "Given an array of `points` where `points[i] = [xi, yi]` represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line."
        },
        {
            "id": 150,
            "difficulty": "Medium",
            "topics": ["String", "Stack"],
            "name": "Evaluate Reverse Polish Notation",
            "content": "Evaluate the value of an arithmetic expression in Reverse Polish Notation.\n\nValid operators are `+`, `-`, `*`, and `/`. Each operand may be an integer or another expression.\n\nNote that division between two integers should truncate toward zero."
        },
        {
            "id": 151,
            "difficulty": "Medium",
            "topics": ["String"],
            "name": "Reverse Words in a String",
            "content": "Given an input string `s`, reverse the order of the words.\n\nA word is defined as a sequence of non-space characters. The words in `s` will be separated by at least one space.\n\nReturn a string of the words in reverse order concatenated by a single space.\n\nNote that `s` may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces."
        },
        {
            "id": 152,
            "difficulty": "Medium",
            "topics": ["Array", "Dynamic Programming"],
            "name": "Maximum Product Subarray",
            "content": "Given an integer array `nums`, find a contiguous non-empty subarray within the array that has the largest product, and return the product.\n\nThe test cases are generated so that the answer will fit in a 32-bit integer."
        },
        {
            "id": 153,
            "difficulty": "Medium",
            "topics": ["Array", "Binary Search"],
            "name": "Find Minimum in Rotated Sorted Array",
            "content": "Suppose an array of length `n` sorted in ascending order is rotated between `1` and `n` times. For example, the array `nums = [0,1,2,4,5,6,7]` might become:\n- `[4,5,6,7,0,1,2]` if it was rotated 4 times\n- `[0,1,2,4,5,6,7]` if it was rotated 7 times\n\nNotice that rotating an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.\n\nGiven the sorted rotated array `nums` of unique elements, return the minimum element of this array."
        },
        {
            "id": 154,
            "difficulty": "Hard",
            "topics": ["Array", "Binary Search"],
            "name": "Find Minimum in Rotated Sorted Array II",
            "content": "Suppose an array of length `n` sorted in ascending order is rotated between `1` and `n` times. For example, the array `nums = [0,1,4,4,5,6,7]` might become:\n- `[4,5,6,7,0,1,4]` if it was rotated 4 times\n- `[0,1,4,4,5,6,7]` if it was rotated 7 times\n\nNotice that rotating an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.\n\nGiven the sorted rotated array `nums` that may contain duplicates, return the minimum element of this array."
        },
        {
            "id": 155,
            "difficulty": "Easy",
            "topics": ["Stack", "Design"],
            "name": "Min Stack",
            "content": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n\nImplement the `MinStack` class:\n- `MinStack()` initializes the stack object.\n- `void push(int val)` pushes the element `val` onto the stack.\n- `void pop()` removes the element on the top of the stack.\n- `int top()` gets the top element of the stack.\n- `int getMin()` retrieves the minimum element in the stack."
        },
        {
            "id": 156,
            "difficulty": "Medium",
            "topics": ["Tree", "Depth-First Search", "Binary Tree"],
            "name": "Binary Tree Upside Down",
            "content": "Given the `root` of a binary tree, turn the tree upside down and return the new root.\n\nYou can turn a binary tree upside down with the following steps:\n1. The original left child becomes the new root.\n2. The original root becomes the new right child.\n3. The original right child becomes the new left child."
        },
        {
            "id": 157,
            "difficulty": "Easy",
            "topics": ["String"],
            "name": "Read N Characters Given Read4",
            "content": "Given a file and assume that you can only read the file using a given method `read4`, implement a method to read `n` characters.\n\nMethod `read4`:\n- The API `read4` reads four consecutive characters from file, then writes those characters into the buffer array `buf4`.\n- The return value is the number of actual characters read.\n\nNote that `read4()` has its own file pointer, much like `FILE *fp` in C."
        },
        {
            "id": 158,
            "difficulty": "Hard",
            "topics": ["String", "Interactive"],
            "name": "Read N Characters Given read4 II - Call Multiple Times",
            "content": "Given a file and assume that you can only read the file using a given method `read4`, implement a method `read` to read `n` characters. Your method `read` may be called multiple times."
        },
        {
            "id": 159,
            "difficulty": "Medium",
            "topics": ["Hash Table", "String", "Sliding Window"],
            "name": "Longest Substring with At Most Two Distinct Characters",
            "content": "Given a string `s`, return the length of the longest substring that contains at most two distinct characters."
        },
        {
            "id": 160,
            "difficulty": "Easy",
            "topics": ["Hash Table", "Linked List", "Two Pointers"],
            "name": "Intersection of Two Linked Lists",
            "content": "Given the heads of two singly linked-lists `headA` and `headB`, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return `null`."
        },
    {
        "id": 161,
        "difficulty": "Medium",
        "topics": ["String", "Binary Search"],
        "name": "One Edit Distance",
        "content": "Given two strings `s` and `t`, return `true` if they are both one edit distance apart, otherwise return `false`.\n\nA string `s` is said to be one distance apart from a string `t` if you can:\n- Insert exactly one character into `s` to get `t`\n- Delete exactly one character from `s` to get `t`\n- Replace exactly one character of `s` with a different character to get `t`"
    },
    {
        "id": 162,
        "difficulty": "Medium",
        "topics": ["Array", "Binary Search"],
        "name": "Find Peak Element",
        "content": "A peak element is an element that is strictly greater than its neighbors.\n\nGiven an integer array `nums`, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.\n\nYou may imagine that `nums[-1] = nums[n] = -∞`.\n\nYou must write an algorithm that runs in `O(log n)` time."
    },
    {
        "id": 163,
        "difficulty": "Medium",
        "topics": ["Hash Table", "Two Pointers", "Design"],
        "name": "Missing Ranges",
        "content": "You are given an inclusive range `[lower, upper]` and a sorted unique integer array `nums`, where all elements are in the inclusive range.\n\nA number `x` is considered missing if `x` is in the range `[lower, upper]` and `x` is not in `nums`.\n\nReturn the smallest sorted list of ranges that cover every missing number exactly. That is, no element of `nums` is in any of the ranges, and each missing number is in one of the ranges."
    },
    {
        "id": 164,
        "difficulty": "Hard",
        "topics": ["Array", "Math"],
        "name": "Maximum Gap",
        "content": "Given an integer array `nums`, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return `0`.\n\nYou must write an algorithm that runs in linear time and uses linear extra space."
    },
    {
        "id": 165,
        "difficulty": "Medium",
        "topics": ["Math", "String"],
        "name": "Compare Version Numbers",
        "content": "Given two version numbers, `version1` and `version2`, compare them.\n\nVersion numbers consist of one or more revisions joined by a dot '.'. Each revision consists of digits and may contain leading zeros. Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on.\n\nReturn:\n- If `version1 < version2`, return `-1`\n- If `version1 > version2`, return `1`\n- If `version1 == version2`, return `0`"
    },
    {
        "id": 166,
        "difficulty": "Medium",
        "topics": ["Hash Table", "Two Pointers", "Design"],
        "name": "Fraction to Recurring Decimal",
        "content": "Given two integers representing the `numerator` and `denominator` of a fraction, return the fraction in string format.\n\nIf the fractional part is repeating, enclose the repeating part in parentheses."
    },
    {
        "id": 167,
        "difficulty": "Medium",
        "topics": ["Array", "Two Pointers", "Binary Search"],
        "name": "Two Sum II - Input Array Is Sorted",
        "content": "Given a 1-indexed array of integers `numbers` that is already sorted in non-decreasing order, find two numbers such that they add up to a specific `target` number. Let these two numbers be `numbers[index1]` and `numbers[index2]` where `1 <= index1 < index2 <= numbers.length`.\n\nReturn the indices of the two numbers, `index1` and `index2`, added by one as an integer array `[index1, index2]` of length 2.\n\nThe tests are generated such that there is exactly one solution. You may not use the same element twice."
    },
    {
        "id": 168,
        "difficulty": "Easy",
        "topics": ["Math", "String"],
        "name": "Excel Sheet Column Title",
        "content": "Given an integer `columnNumber`, return its corresponding column title as it appears in an Excel sheet.\n\nFor example:\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28\n..."
    },
    {
        "id": 169,
        "difficulty": "Easy",
        "topics": ["Array", "Hash Table", "Divide and Conquer", "Sorting", "Counting"],
        "name": "Majority Element",
        "content": "Given an array `nums` of size `n`, return the majority element.\n\nThe majority element is the element that appears more than `⌊n / 2⌋` times. You may assume that the majority element always exists in the array."
    },
    {
        "id": 170,
        "difficulty": "Hard",
        "topics": ["Hash Table", "Two Pointers", "Design"],
        "name": "Two Sum III - Data structure design",
        "content": "Design a data structure that accepts a stream of integers and checks if it has a pair of integers that sum up to a particular value.\n\nImplement the `TwoSum` class:\n- `TwoSum()` Initializes the `TwoSum` object, with an empty array initially.\n- `void add(int number)` Adds `number` to the data structure.\n- `boolean find(int value)` Returns `true` if there exists any pair of numbers whose sum is equal to `value`, otherwise, it returns `false`."
    },
    {
        "id": 171,
        "difficulty": "Easy",
        "topics": ["Math", "String"],
        "name": "Excel Sheet Column Number",
        "content": "Given a string `columnTitle` that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28\n..."
    },
    {
        "id": 172,
        "difficulty": "Medium",
        "topics": ["Math"],
        "name": "Factorial Trailing Zeroes",
        "content": "Given an integer `n`, return the number of trailing zeroes in `n!`.\n\nNote that `n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1`."
    },
    {
        "id": 173,
        "difficulty": "Medium",
        "topics": ["Stack", "Tree", "Design", "Binary Search Tree", "Binary Tree", "Iterator"],
        "name": "Binary Search Tree Iterator",
        "content": "Implement the `BSTIterator` class that represents an iterator over the in-order traversal of a binary search tree (BST):\n- `BSTIterator(TreeNode root)` Initializes an object of the `BSTIterator` class. The `root` of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\n- `boolean hasNext()` Returns `true` if there exists a number in the traversal to the right of the pointer, otherwise returns `false`.\n- `int next()` Moves the pointer to the right, then returns the number at the pointer."
    },
    {
        "id": 174,
        "difficulty": "Hard",
        "topics": ["Array", "Dynamic Programming"],
        "name": "Dungeon Game",
        "content": "The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of `m x n` rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\n\nThe knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.\n\nSome of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\n\nReturn the knight's minimum initial health so that he can rescue the princess."
    },
    {
        "id": 175,
        "difficulty": "Medium",
        "topics": ["Database"],
        "name": "Combine Two Tables",
        "content": "Table: `Person`\n```\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| personId    | int     |\n| lastName    | varchar |\n| firstName   | varchar |\n+-------------+---------+\npersonId is the primary key column for this table.\nThis table contains information about the ID of some persons and their first and last names.\n```\n\nTable: `Address`\n```\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| addressId   | int     |\n| personId    | int     |\n| city        | varchar |\n| state       | varchar |\n+-------------+---------+\naddressId is the primary key column for this table.\nEach row of this table contains information about the city and state of one person with ID = PersonId.\n```\n\nWrite an SQL query to report the first name, last name, city, and state of each person in the Person table. If the address of a personId is not present in the Address table, report null instead.\n\nReturn the result table in any order."
    },
    {
        "id": 176,
        "difficulty": "Medium",
        "topics": ["Database"],
        "name": "Second Highest Salary",
        "content": "Table: `Employee`\n```\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| salary      | int  |\n+-------------+------+\nid is the primary key column for this table.\nEach row of this table contains information about the salary of an employee.\n```\n\nWrite an SQL query to report the second highest salary from the Employee table. If there is no second highest salary, the query should report null."
    },
    {
        "id": 177,
        "difficulty": "Medium",
        "topics": ["Database"],
        "name": "Nth Highest Salary",
        "content": "Table: `Employee`\n```\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| salary      | int  |\n+-------------+------+\nid is the primary key column for this table.\nEach row of this table contains information about the salary of an employee.\n```\n\nWrite an SQL query to report the nth highest salary from the Employee table. If there is no nth highest salary, the query should report null."
    },
    {
        "id": 178,
        "difficulty": "Medium",
        "topics": ["Database"],
        "name": "Rank Scores",
        "content": "Table: `Scores`\n```\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| score       | decimal |\n+-------------+---------+\nid is the primary key for this table.\nEach row of this table contains the score of a game. Score is a floating point value with two decimal places.\n```\n\nWrite an SQL query to rank the scores. The ranking should be calculated according to the following rules:\n- The scores should be ranked from the highest to the lowest.\n- If there is a tie between two scores, both should have the same ranking.\n- After a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no holes between ranks."
    },
    {
        "id": 179,
        "difficulty": "Medium",
        "topics": ["String", "Math"],
        "name": "Largest Number",
        "content": "Given a list of non-negative integers `nums`, arrange them such that they form the largest number.\n\nNote: The result may be very large, so you need to return a string instead of an integer."
    },
    {
        "id": 180,
        "difficulty": "Medium",
        "topics": ["Database"],
        "name": "Consecutive Numbers",
        "content": "Table: `Logs`\n```\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| num         | varchar |\n+-------------+---------+\nid is the primary key for this table.\n```\n\nWrite an SQL query to find all numbers that appear at least three times consecutively.\n\nReturn the result table in any order."
    },
    {
        "id": 181,
        "difficulty": "Easy",
        "topics": ["Database"],
        "name": "Employees Earning More Than Their Managers",
        "content": "Table: `Employee`\n```\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n| salary      | int     |\n| managerId   | int     |\n+-------------+---------+\nid is the primary key column for this table.\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\n```\n\nWrite an SQL query to find the employees who earn more than their managers.\n\nReturn the result table in any order."
    },
    {
        "id": 182,
        "difficulty": "Easy",
        "topics": ["Database"],
        "name": "Duplicate Emails",
        "content": "Table: `Person`\n```\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| email       | varchar |\n+-------------+---------+\nid is the primary key column for this table.\nEach row of this table contains an email. The emails will not contain uppercase letters.\n```\n\nWrite an SQL query to report all the duplicate emails.\n\nReturn the result table in any order."
    },
    {
        "id": 183,
        "difficulty": "Easy",
        "topics": ["Database"],
        "name": "Customers Who Never Order",
        "content": "Table: `Customers`\n```\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n+-------------+---------+\nid is the primary key column for this table.\nEach row of this table indicates the ID and name of a customer.\n```\n\nTable: `Orders`\n```\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| customerId  | int  |\n+-------------+------+\nid is the primary key column for this table.\ncustomerId is a foreign key of the ID from the Customers table.\nEach row of this table indicates the ID of an order and the ID of the customer who ordered it.\n```\n\nWrite an SQL query to report all customers who never order anything.\n\nReturn the result table in any order."
    },
    {
        "id": 184,
        "difficulty": "Medium",
        "topics": ["Database"],
        "name": "Department Highest Salary",
        "content": "Table: `Employee`\n```\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| id           | int     |\n| name         | varchar |\n| salary       | int     |\n| departmentId | int     |\n+--------------+---------+\nid is the primary key column for this table.\ndepartmentId is a foreign key of the ID from the Department table.\nEach row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.\n```\n\nTable: `Department`\n```\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n+-------------+---------+\nid is the primary key column for this table.\nEach row of this table indicates the ID of a department and its name.\n```\n\nWrite an SQL query to find employees who have the highest salary in each of the departments.\n\nReturn the result table in any order."
    },
    {
        "id": 185,
        "difficulty": "Hard",
        "topics": ["Database"],
        "name": "Department Top Three Salaries",
        "content": "Table: `Employee`\n```\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| id           | int     |\n| name         | varchar |\n| salary       | int     |\n| departmentId | int     |\n+--------------+---------+\nid is the primary key column for this table.\ndepartmentId is a foreign key of the ID from the Department table.\nEach row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.\n```\n\nTable: `Department`\n```\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n+-------------+---------+\nid is the primary key column for this table.\nEach row of this table indicates the ID of a department and its name.\n```\n\nA company's executives are interested in seeing who earns the most money in each of the company's departments. A high earner in a department is an employee who has a salary in the top three unique salaries for that department.\n\nWrite an SQL query to find the employees who are high earners in each of the departments.\n\nReturn the result table in any order."
    },
    {
        "id": 186,
        "difficulty": "Medium",
        "topics": ["Array", "Two Pointers"],
        "name": "Reverse Words in a String II",
        "content": "Given a character array `s`, reverse the order of the words.\n\nA word is defined as a sequence of non-space characters. The words in `s` will be separated by a single space.\n\nYour code must solve the problem in-place, i.e. without allocating extra space."
    },
    {
        "id": 187,
        "difficulty": "Medium",
        "topics": ["String", "Bit Manipulation"],
        "name": "Repeated DNA Sequences",
        "content": "The DNA sequence is composed of a series of nucleotides abbreviated as `'A'`, `'C'`, `'G'`, and `'T'`.\n\n- For example, `\"ACGAATTCCG\"` is a DNA sequence.\n\nWhen studying DNA, it is useful to identify repeated sequences within the DNA.\n\nGiven a string `s` that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order."
    },
    {
        "id": 188,
        "difficulty": "Hard",
        "topics": ["Array", "Dynamic Programming"],
        "name": "Best Time to Buy and Sell Stock IV",
        "content": "You are given an integer array `prices` where `prices[i]` is the price of a given stock on the ith day, and an integer `k`.\n\nFind the maximum profit you can achieve. You may complete at most `k` transactions.\n\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again)."
    },
    {
        "id": 189,
        "difficulty": "Medium",
        "topics": ["Array", "Math", "Two Pointers"],
        "name": "Rotate Array",
        "content": "Given an array, rotate the array to the right by `k` steps, where `k` is non-negative.\n\nFollow up:\n- Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.\n- Could you do it in-place with O(1) extra space?"
    },
    {
        "id": 190,
        "difficulty": "Easy",
        "topics": ["Bit Manipulation"],
        "name": "Reverse Bits",
        "content": "Reverse bits of a given 32 bits unsigned integer."
    },
    {
        "id": 191,
        "difficulty": "Easy",
        "topics": ["Bit Manipulation"],
        "name": "Number of 1 Bits",
        "content": "Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).\n\nNote:\n- Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\n- In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. `-3`."
    },
    {
        "id": 192,
        "difficulty": "Medium",
        "topics": ["Shell"],
        "name": "Word Frequency",
        "content": "Write a bash script to calculate the frequency of each word in a text file `words.txt`.\n\nFor simplicity sake, you may assume:\n- `words.txt` contains only lowercase characters and space `' '` characters.\n- Each word must consist of lowercase characters only.\n- Words are separated by one or more whitespace characters.\n\nOutput format:\n- Sort the words with their corresponding frequency in descending order.\n- If two words have the same frequency, then sort them lexicographically."
    },
    {
        "id": 193,
        "difficulty": "Easy",
        "topics": ["Shell"],
        "name": "Valid Phone Numbers",
        "content": "Given a text file `file.txt` that contains a list of phone numbers (one per line), write a one-liner bash script to print all valid phone numbers.\n\nYou may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)"
    },
    {
        "id": 194,
        "difficulty": "Medium",
        "topics": ["Shell"],
        "name": "Transpose File",
        "content": "Given a text file `file.txt`, transpose its content.\n\nYou may assume that each row has the same number of columns, and each field is separated by the `' '` character."
    },
    {
        "id": 195,
        "difficulty": "Easy",
        "topics": ["Shell"],
        "name": "Tenth Line",
        "content": "Given a text file `file.txt`, print just the 10th line of the file.\n\nExample:\nAssume that `file.txt` has the following content:\n```\nLine 1\nLine 2\nLine 3\nLine 4\nLine 5\nLine 6\nLine 7\nLine 8\nLine 9\nLine 10\n```\n\nYour script should output the tenth line, which is:\n```\nLine 10\n```"
    },
    {
        "id": 196,
        "difficulty": "Easy",
        "topics": ["Database"],
        "name": "Delete Duplicate Emails",
        "content": "Table: `Person`\n```\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| email       | varchar |\n+-------------+---------+\nid is the primary key column for this table.\nEach row of this table contains an email. The emails will not contain uppercase letters.\n```\n\nWrite an SQL query to delete all the duplicate emails, keeping only one unique email with the smallest id.\n\nNote that you are supposed to write a DELETE statement and not a SELECT one.\n\nAfter running your script, the answer shown is the Person table. The driver will first compile and run your piece of code and then show the Person table. The final order of the Person table does not matter."
    },
    {
        "id": 197,
        "difficulty": "Easy",
        "topics": ["Database"],
        "name": "Rising Temperature",
        "content": "Table: `Weather`\n```\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| recordDate    | date    |\n| temperature   | int     |\n+---------------+---------+\nid is the primary key for this table.\nThis table contains information about the temperature on a certain day.\n```\n\nWrite an SQL query to find all dates' Id with higher temperatures compared to its previous dates (yesterday).\n\nReturn the result table in any order."
    },
    {
        "id": 198,
        "difficulty": "Medium",
        "topics": ["Array", "Dynamic Programming"],
        "name": "House Robber",
        "content": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\n\nGiven an integer array `nums` representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police."
    },
    {
        "id": 199,
        "difficulty": "Medium",
        "topics": ["Tree", "Depth-First Search", "Breadth-First Search", "Binary Tree"],
        "name": "Binary Tree Right Side View",
        "content": "Given the `root` of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom."
    },
    {
        "id": 200,
        "difficulty": "Medium",
        "topics": ["Array", "Math", "Dynamic Programming", "Number Theory"],
        "name": "Number of Islands",
        "content": "Given an `m x n` 2D binary grid `grid` which represents a map of `'1'`s (land) and `'0'`s (water), return the number of islands.\n\nAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water."
    }
]